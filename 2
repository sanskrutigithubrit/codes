public class LinkedListCycleDetector {
    public boolean hasCycle(Node head) {
        Node slow = head;
        Node fast = head;

        while (fast!= null && fast.next!= null) {
            slow = slow.next;
            fast = fast.next.next;

            if (slow == fast) {
                return true;
            }
        }

        return false;
    }

    public static class Node {
        int value;
        Node next;

        public Node(int value) {
            this.value = value;
        }
    }

    public static void main(String[] args) {
        Node head = new Node(20);
        head.next = new Node(30);
        head.next.next = new Node(40);
        head.next.next.next = new Node(60);
        head.next.next.next.next = new Node(80);
        head.next.next.next.next.next = head.next.next; // create a cycle

        LinkedListCycleDetector detector = new LinkedListCycleDetector();
        System.out.println(detector.hasCycle(head)); // Output: true

        Node head2 = new Node(6);
        head2.next = new Node(4);
        head2.next.next = new Node(2);
        head2.next.next.next = new Node(8);

        System.out.println(detector.hasCycle(head2)); // Output: false
    }
}

